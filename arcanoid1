import pygame

import random



# Инициализация Pygame

pygame.init()



# Константы

WIDTH, HEIGHT = 800, 600

PADDLE_WIDTH, PADDLE_HEIGHT = 100, 20

BALL_RADIUS = 10

BRICK_WIDTH, BRICK_HEIGHT = 75, 20

BRICKS_PER_ROW = WIDTH // BRICK_WIDTH

BRICK_ROWS = 5



# Цвета

WHITE = (255, 255, 255)

BLACK = (0, 0, 0)

RED = (255, 0, 0)

GREEN = (0, 255, 0)

BLUE = (0, 0, 255)



# Создание экрана

screen = pygame.display.set_mode((WIDTH, HEIGHT))

pygame.display.set_caption("Arkanoid")



# Класс для кирпичей

class Brick:

    def __init__(self, x, y):

        self.rect = pygame.Rect(x, y, BRICK_WIDTH, BRICK_HEIGHT)

        self.hit = False



# Класс для ракетки

class Paddle:

    def __init__(self):

        self.rect = pygame.Rect(WIDTH // 2 - PADDLE_WIDTH // 2, HEIGHT - PADDLE_HEIGHT - 10, PADDLE_WIDTH, PADDLE_HEIGHT)



    def move(self, dx):

        self.rect.x += dx

        # Проверка границ

        if self.rect.x < 0:

            self.rect.x = 0

        if self.rect.x > WIDTH - PADDLE_WIDTH:

            self.rect.x = WIDTH - PADDLE_WIDTH



# Класс для мяча

class Ball:

    def __init__(self):

        self.rect = pygame.Rect(WIDTH // 2 - BALL_RADIUS, HEIGHT // 2 - BALL_RADIUS, BALL_RADIUS * 2, BALL_RADIUS * 2)

        self.dx = random.choice([-4, 4])

        self.dy = -4



    def move(self):

        self.rect.x += self.dx

        self.rect.y += self.dy



# Основная функция игры

def main():

    clock = pygame.time.Clock()

    paddle = Paddle()

    ball = Ball()

    bricks = [Brick(x * BRICK_WIDTH, y * BRICK_HEIGHT) for y in range(BRICK_ROWS) for x in range(BRICKS_PER_ROW)]

    running = True



    while running:

        for event in pygame.event.get():

            if event.type == pygame.QUIT:

                running = False



        keys = pygame.key.get_pressed()

        if keys[pygame.K_LEFT]:

            paddle.move(-10)

        if keys[pygame.K_RIGHT]:

            paddle.move(10)



        ball.move()



        # Проверка столкновения с стенами

        if ball.rect.x <= 0 or ball.rect.x >= WIDTH - BALL_RADIUS * 2:

            ball.dx *= -1

        if ball.rect.y <= 0:

            ball.dy *= -1

        if ball.rect.y >= HEIGHT:

            running = False  # Игра окончена



        # Проверка столкновения с ракеткой

        if ball.rect.colliderect(paddle.rect):

            ball.dy *= -1

            ball.rect.y = paddle.rect.top - BALL_RADIUS * 2



        # Проверка столкновения с кирпичами

        for brick in bricks:

            if not brick.hit and ball.rect.colliderect(brick.rect):

                ball.dy *= -1

                brick.hit = True



        # Очистка экрана и отрисовка объектов

        screen.fill(BLACK)

        for brick in bricks:

            if not brick.hit:

                pygame.draw.rect(screen, RED, brick.rect)

        pygame.draw.rect(screen, BLUE, paddle.rect)

        pygame.draw.ellipse(screen, WHITE, ball.rect)



        pygame.display.flip()

        clock.tick(60)



    pygame.quit()



if __name__ == "__main__":

    main()
